// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1039.TShirtCannonJava.subsystems;

import org.usfirst.frc1039.TShirtCannonJava.RobotMap;
import org.usfirst.frc1039.TShirtCannonJava.commands.*;
import org.usfirst.frc1039.TShirtCannonJava.StopWatch;;


import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import com.ctre.*;


/**
 *
 */
public class Cannon extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Solenoid barrelExtender = RobotMap.cannonBarrelExtender;
    private final DoubleSolenoid pin = RobotMap.cannonPin;
    private final Solenoid shootSolenoid = RobotMap.cannonShootSolenoid;
    private final Relay chargeSolenoid = RobotMap.cannonChargeSolenoid;
    private final Relay light = RobotMap.cannonLight;
    private final CANTalon barrelRotator = RobotMap.cannonBarrelRotator;
    private final DigitalInput barrellimit = RobotMap.cannonBarrellimit;
    private final DigitalInput barrelLocator = RobotMap.BarrelLocator;
    private final Encoder shooterEncoder = RobotMap.shooterEncoder;

    public int currentBarrel = -1;
    public int nextBarrel = -1;
    private float error = 0;
    public boolean reachedNextBarrel = false;
    private boolean indexed = false;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean isCharged = false;
    private boolean isSafeToBarrleIn = false;
    private boolean haveWeSeenFalse = false;
    private boolean boolBarrleDebug = false;
    private boolean boolShootDebug = false;

	// Stop watch to wait for the barrel
	StopWatch barrelWatch = new StopWatch(2000);
	// Stop watch to charge watch
	StopWatch chargeWatch = new StopWatch(5000);
	// Stop watch to shoot
	StopWatch shootWatch = new StopWatch(2000);

    //----------------------------------------------------------------------------
    //  Purpose:
    //      reset encoder
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void zeroEncoder(){
    	//shooterEncoder.setIndexSource(barrelLocator);
    }

    //----------------------------------------------------------------------------
    //  Purpose:
    //      Initialize stuff
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //  Shooting
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------

    //----------------------------------------------------------------------------
    //  Purpose:
    //      start the shooting timer
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void startShoot()
    {
    	System.out.println("Start Shoot");
    	boolShootDebug = true;
    	shootWatch.reset();
    }
      
    //----------------------------------------------------------------------------
    //  Purpose:
    //      Shoot t-shirt
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void shoot(){
    	
    	// only display shoot once
    	if(true == boolShootDebug)
    	{
    		boolShootDebug = false;
    		System.out.println("Shoot");
    	}
    	
    	// if the system is charged then open the solenoid
    	if(isCharged){
    		light.set(Relay.Value.kOff);
        	shootSolenoid.set(true);
    	}
    }
    
    //----------------------------------------------------------------------------
    //  Purpose:
    //      check if the shot is done
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public boolean isShootDone()
    {
    	if(shootWatch.isExpired())
    	{
        	System.out.println("Shoot Done");
    		light.set(Relay.Value.kOn);
    		shootSolenoid.set(false);
    		isCharged = false;
    		return true;
    	}
    	return false;
    }
    
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //  Barrel it in or out
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------

    //----------------------------------------------------------------------------
    //  Purpose:
    //      reset the barrel in/out timer
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void startBarreling()
    {
    	barrelWatch.reset();
    	boolBarrleDebug = true;
    }
    
    //----------------------------------------------------------------------------
    //  Purpose:
    //      Try to bring the barrel in
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void setBarrelIn()
    {
    	// Check if safe to barrel in
    	if(true == isSafeToBarrleIn)
    	{
    		if(true == boolBarrleDebug)
    		{
    			boolBarrleDebug = false;
    			System.out.println("Barrel In");
    		}
    		barrelExtender.set(true);
    	}
    	else
    	{
    		if(true == boolBarrleDebug)
    		{
    			boolBarrleDebug = false;
    			System.out.println("Not Safe to Barrel In");
    		}
    	}
    }

    //----------------------------------------------------------------------------
    //  Purpose:
    //      Push the barrel in
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void setBarrelOut()
    {
		if(true == boolBarrleDebug)
		{
			boolBarrleDebug = false;
			System.out.println("Barrel Out");
		}
    	barrelExtender.set(false);
    }
    
    //----------------------------------------------------------------------------
    //  Purpose:
    //      Are we done pushing or pulling barrel
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public boolean isBarrleDone()
    {
    	return barrelWatch.isExpired();
    }

    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //  Charge shoot tank
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    
    //----------------------------------------------------------------------------
    //  Purpose:
    //      Start changing the system
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void startCharging()
    {
    	chargeWatch.reset();
    	isCharged = false;
    }
    
    //----------------------------------------------------------------------------
    //  Purpose:
    //      Do the heaving lifting of the charging
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void charge(){
		light.set(Relay.Value.kForward);
		chargeSolenoid.set(Relay.Value.kForward);
		
		if(chargeWatch.isExpired())
		{
	    	System.out.println("Charged");
    		chargeSolenoid.set(Relay.Value.kOff);
    		isCharged = true;
		}
    }
    
    //----------------------------------------------------------------------------
    //  Purpose:
    //      is the System charged
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public boolean isCharged()
    {    	
    	return isCharged;
    }
        
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //  Charge shoot tank
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
        
    //----------------------------------------------------------------------------
    //  Purpose:
    //      Rotate the barrel until it is 'sitting' on a tube
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void zeroBarrels(){
    	if(false == barrelLocator.get())
    	{
    		startRotate();
	    	
	    	if(barrelLocator.get() == true && indexed == false)
	    	{
	    		shooterEncoder.reset();
	        	System.out.println("Reset");
	    		indexed = true;
	    	}
	    	if(barrelLocator.get() == false && indexed == true)
	    	{
	    		indexed = false;
	    	}
    	}
    	else
    	{
    		stopRotate();
    		shooterEncoder.reset();
        	System.out.println("Reset");
    		currentBarrel = 0;
    		isSafeToBarrleIn = true;
    	}
    }
    
    //----------------------------------------------------------------------------
    //  Purpose:
    //      do stuff to change the barrel
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void setNextBarrel()
    {
    	nextBarrel = currentBarrel + 1;
    	indexed = false;
    	haveWeSeenFalse = false;
    }

    
    //----------------------------------------------------------------------------
    //  Purpose:
    //      Rotate the barrel
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void rotate(){
    	System.out.print(barrelLocator.get());
    	System.out.print(" ");
    	System.out.print(indexed);
    	System.out.print(" ");
    	System.out.print(nextBarrel);
    	System.out.print(" ");
    	System.out.println(currentBarrel);
    	    	
    	if(barrelLocator.get() == true && indexed == false && true == haveWeSeenFalse)
    	{
    		shooterEncoder.reset();
        	System.out.println("Reset");
    		indexed = true;
    		currentBarrel = nextBarrel;
    		isSafeToBarrleIn = true;
    	}
    	if(barrelLocator.get() == false)
    	{
    		isSafeToBarrleIn = false;
        	startRotate();
    		indexed = false;
    		haveWeSeenFalse = true;
    	}
    }

    //----------------------------------------------------------------------------
    //  Purpose:
    //      Rotate the barrel until the next barrel is up
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------
    public boolean isNextBarrel(){
    	if(currentBarrel == nextBarrel)
    	{
    		stopRotate();
    		return true;
    	}
    	return false;
    }
    
       
    //----------------------------------------------------------------------------
    //  Purpose:
    //      Start the rotating motor
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void startRotate(){
    	barrelRotator.set(-0.2);
    }

    //----------------------------------------------------------------------------
    //  Purpose:
    //      Stop the rotating motor
    //
    //  Notes:
    //      None
    //
    //----------------------------------------------------------------------------    
    public void stopRotate(){
    	barrelRotator.set(0.0);
    }

}