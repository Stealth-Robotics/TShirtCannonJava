// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1039.TShirtCannonJava.subsystems;

import org.usfirst.frc1039.TShirtCannonJava.RobotMap;
import org.usfirst.frc1039.TShirtCannonJava.commands.*;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import com.ctre.*;


/**
 *
 */
public class Cannon extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Solenoid barrelExtender = RobotMap.cannonBarrelExtender;
    private final DoubleSolenoid pin = RobotMap.cannonPin;
    private final Solenoid shootSolenoid = RobotMap.cannonShootSolenoid;
    private final Relay chargeSolenoid = RobotMap.cannonChargeSolenoid;
    private final Relay light = RobotMap.cannonLight;
    private final CANTalon barrelRotator = RobotMap.cannonBarrelRotator;
    private final DigitalInput barrellimit = RobotMap.cannonBarrellimit;
    private final DigitalInput barrelLocator = RobotMap.BarrelLocator;
    private final Encoder shooterEncoder = RobotMap.shooterEncoder;

    public int currentBarrel;
    private float error = 0;
    public boolean reachedNextBarrel = true;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean isCharged = false;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void zeroEncoder(){
    	shooterEncoder.setIndexSource(barrelLocator);
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void zeroBarrels(){
    	do{
    	rotate();
    	}while(shooterEncoder.getRaw() != 0);
    	currentBarrel = 0;
    }
    public void setBarrel(boolean position){
    	barrelExtender.set(position);
    }
    public void setPin(boolean position){
    	pin.set(position ? Value.kForward : Value.kReverse);
    }
    public void charge(){
    	if(!isCharged){
    		light.set(Relay.Value.kForward);
    		chargeSolenoid.set(Relay.Value.kForward);
    		Timer.delay(2.0);
    		chargeSolenoid.set(Relay.Value.kOff);
    		Timer.delay(0.1);
    		isCharged = true;
    	}
    }
    public void shoot(){
    	if(isCharged){
    		light.set(Relay.Value.kOff);
    		shootSolenoid.set(true);
    		Timer.delay(1.0);
    		shootSolenoid.set(false);
    		isCharged = false;
    	}
    }
    public void rotate(){
    	barrelRotator.set(0.2);
    }
    public void stopRotate(){
    	barrelRotator.set(0);
    }
    public boolean isLimitPressed()
    {
    	return barrellimit.get();
    }
    public void nextBarrel(){
    	while(error > 0)
    	{
    		error = currentBarrel * 10 - shooterEncoder.getRaw();
    		barrelRotator.set(.5 * error);
    	}
    	currentBarrel++;
    	
    }
    
}