// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1039.TShirtCannonJava;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import com.ctre.*;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveRightDrive;
    public static CANTalon driveLeftDrive;
    public static RobotDrive driveRobotDriveMotors;
    public static Solenoid cannonBarrelExtender;
    public static DoubleSolenoid cannonPin;
    public static Solenoid cannonShootSolenoid;
    public static Relay cannonChargeSolenoid;
    public static Relay cannonLight;
    public static CANTalon cannonBarrelRotator;
    public static DigitalInput cannonBarrellimit;
    public static DigitalInput BarrelLocator;
    public static Encoder shooterEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveRightDrive = new CANTalon(2);
        LiveWindow.addActuator("Drive", "RightDrive", driveRightDrive);
        
        driveLeftDrive = new CANTalon(1);
        LiveWindow.addActuator("Drive", "LeftDrive", driveLeftDrive);
        
        driveRobotDriveMotors = new RobotDrive(driveLeftDrive, driveRightDrive);
        
        driveRobotDriveMotors.setSafetyEnabled(true);
        driveRobotDriveMotors.setExpiration(0.1);
        driveRobotDriveMotors.setSensitivity(0.5);
        driveRobotDriveMotors.setMaxOutput(1.0);
        driveRobotDriveMotors.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveRobotDriveMotors.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        cannonBarrelExtender = new Solenoid(0, 2);
        LiveWindow.addActuator("Cannon", "BarrelExtender", cannonBarrelExtender);
        
        cannonPin = new DoubleSolenoid(0, 3, 4);
        LiveWindow.addActuator("Cannon", "Pin", cannonPin);
        
        cannonShootSolenoid = new Solenoid(0, 1);
        LiveWindow.addActuator("Cannon", "ShootSolenoid", cannonShootSolenoid);
        
        cannonChargeSolenoid = new Relay(0);
        LiveWindow.addActuator("Cannon", "ChargeSolenoid", cannonChargeSolenoid);
        
        cannonLight = new Relay(1);
        LiveWindow.addActuator("Cannon", "Light", cannonLight);
        
        cannonBarrelRotator = new CANTalon(4);
        LiveWindow.addActuator("Cannon", "BarrelRotator", cannonBarrelRotator);
        
        cannonBarrellimit = new DigitalInput(2);
        LiveWindow.addSensor("Cannon", "Barrellimit", cannonBarrellimit);
        
        BarrelLocator = new DigitalInput(7);
        
        shooterEncoder = new Encoder(8, 9);
        shooterEncoder.setDistancePerPulse(1/50);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
